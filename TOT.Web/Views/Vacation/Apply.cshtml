@model TOT.Dto.ApplyForRequestGetDto

@using Microsoft.AspNetCore.Identity
@using TOT.Entities
@using TOT.Interfaces.Services

@{
    var userId = UserManager.GetUserId(User);
}
@inject UserManager<ApplicationUser> UserManager
@inject IVacationService VacationService

<div class="row justify-content-between">
    <div class="container col-6">
        <h2 class="text-center">Apply for vacation</h2>
        <hr />
        <form asp-action="Apply" name="form" id="form">

            <div class="form-group row">
                <label asp-for="TimeOffType" class="control-label col-4"></label>
                <select asp-for="TimeOffType" asp-items="Model.VacationTypes" class="form-control col-8"></select>
                <span asp-validation-for="TimeOffType" class="text-danger"></span>
            </div>

            <div class="form-group row">
                <label asp-for="StartDate" class="control-label col-4"></label>
                <input id="StartDate" asp-for="StartDate" class="form-control col-8" />
                <span id="StartDateVal" asp-validation-for="StartDate" class="text-danger"></span>
            </div>

            <div class="form-group row">
                <label asp-for="EndDate" class="control-label col-4"></label>
                <input id="EndDate" asp-for="EndDate" class="form-control col-8" />
                <span asp-validation-for="EndDate" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Notes" class="control-label"></label>
                <textarea style="resize:none" asp-for="Notes" class="form-control" rows="4"></textarea>
                <span asp-validation-for="Notes" class="text-danger"></span>
            </div>

<div class="form-group">
    <table name="add_manager_table" id="add_manager_table">
        <tr id="add_manager_row_1">
            <td>
                <label class="control-label">Manager 1</label>
                <select class="selectpicker" data-live-search="true">
                    <option data-subtext="">jkljg</option>
                </select>
            </td>
            <td>
                <button type="button" class="btn btn-success">+</button>
                <button type="button" class="btn btn-warning" disabled>-</button>
            </td>
        </tr>
    </table>
</div>

        </form>
    </div>
    <div class="col-3 d-flex flex-column align-items-center justify-content-center">
        @{
            var vacationDays = VacationService.GetVacationDays(int.Parse(userId));
        }
        <partial name="_VacationDaysPartial" model="vacationDays" />
    </div>
</div>

@section Scripts {
    <partial  name="_ValidationScriptsPartial" />


}
<script>
    window.addEventListener("DOMContentLoaded", AddManagerTableSelect, false);
    let table = document.getElementById("add_manager_table");
    let managerSelectCount = 0;
    let managerList = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.ExsistingManagers, Newtonsoft.Json.Formatting.Indented));
    function addManagerTableSelect() {
        managerSelectCount++;
        let currentMngNumber = managerSelectCount;
        var nonSelectedValues = getNonSelectedValues(managerList, getSelectedValues())
        var tr = document.createElement("tr");
        var td1 = document.createElement("td");
        var td2 = document.createElement("td");

        var select = document.createElement("select");
        select.classList.add("selectpicker");
        select.setAttribute("data-live-search", "true");
        for (var nsyv in nonSelectedValues) {
            select.insertAdjacentHTML("afterbegin", `<option data-subtext="${nsyv}">${nonSelectedValues[nsyv]}/option>`);
        }

        td1.insertAdjacentHTML("afterbegin", `<label class="control-label">Manager ${currentMngNumber}</label>`);
        td1.insertAdjacentElement("beforeend", select);
        td2.insertAdjacentHTML("afterbegin", '<button type="button" class="btn btn-success">+</button>');
        td2.insertAdjacentHTML("beforeend", '<button type="button" class="btn btn-warning" disabled>-</button>');
        td2.children[0].addEventListener('click', addManagerTableSelect, false);
        td2.children[1].addEventListener('click', deleteManagerTableSelect(currentMngNumber));
        tr.setAttribute("id", `add_manager_row_${currentMngNumber}`);

        tr.insertAdjacentElement("afterbegin", td1);
        tr.insertAdjacentElement("afterend", td2);

        table.append(tr);
    }

        function deleteManagerTableSelect(id) {

    }

    function SelectManagerTableSelect(id) {
        window.alert(id);
    }

    //Get the array, which consists on the managers, which have been already selected by user
    function getSelectedValues() {
        let selectedValues = [];
        for (let row in table.children) {
            let select = row.children[0].children[1];
            selectedValues.push(select.options[e.selectedIndex].value);
        }
        return selectedValues;
    }

    function getNonSelectedValues(jsonObj, arrayObj)
    {
        let ret = {};
        for (let i in arrayObj) {
            if (!jsonObj.hasOwnProperty(i)) {
                ret[i] = jsonObj[i];
            }
        }

        return ret;
    }
</script>