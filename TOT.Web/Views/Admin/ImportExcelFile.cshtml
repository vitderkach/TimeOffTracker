@model TOT.Dto.ImportExcelFileDto
@using Microsoft.AspNetCore.Mvc.Localization
@inject IHtmlLocalizer<TOT.Resources.Resources> Localizer
@{
    ViewData["Title"] = "ImportExcelFile";

}

<h1>@Localizer["Import excel file"]</h1>


<div class="row justify-content-center mt-5 col-12">
    <form asp-controller="Admin" asp-action="ImportExcelFile" method="post" class="col-8" enctype="multipart/form-data" id="excelForm">
        <div asp-validation-summary="All" class="text-danger row"></div>
        <div class="text-danger row">
            <ul id="excelErrors">
            </ul>
        </div>
        <div class="form-group row">
            <label asp-for="ExcelFile" class="col col-3"></label>
            <input class="form-control-file col col-9" type="file" asp-for="ExcelFile" onchange="getExcelSheetNames()" onselect="showSheet()" accept=".xls,.xlsx" id="fileInput" />
            <span asp-validation-for="ExcelFile" class="text-danger"></span>
        </div>
        <div class="form-group row justify-content-between mr-0" id="selectSheetDiv" hidden>
            <label class="col col-3">@Localizer["Select sheet"]</label>
            <select class="selectpicker col col-6" data-live-search="true" id="sheetNameSelect" asp-for="SheetName"></select>
            <button class="col col-2 btn btn-success" onclick="showSheet()" type="button">@Localizer["Show"]</button>
            <span asp-validation-for="SheetName" class="text-danger"></span>
        </div>
        <div class="flex-column justify-content-center align-items-center" style="width:100%; height:600px; display:flex" id="excelSpinner" hidden>
            <div class="spinner-border" role="status">
                <span class="sr-only">@Localizer["Loading"]...</span>
            </div>
            <div>
                <h3>@Localizer["Please, wait"]...</h3>
            </div>

        </div>
        <iframe id="excelFrame" src="about:blank" hidden scrolling="yes"></iframe>

        <div id="excelColumnsData" hidden>
            <div class="form-group row">
                <div class=" col col-4 pr-0">
                    <label asp-for="StartEmployeeIndex"></label>
                    <input class="form-control" type="number" asp-for="StartEmployeeIndex" value="1" min="1" />
                    <span asp-validation-for="StartEmployeeIndex" class="text-danger"></span>
                </div>
                <div class=" col col-4 pr-0">
                    <label asp-for="EndEmployeeIndex"></label>
                    <input class="form-control" type="number" asp-for="EndEmployeeIndex" value="1" min="1" />
                    <span asp-validation-for="EndEmployeeIndex" class="text-danger"></span>
                </div>
            </div>


            <div class="form-group row">
                <label class="col col-4" asp-for="EmployeeNameIndex"></label>
                <input class="form-control col col-4" type="number" asp-for="EmployeeNameIndex" value="1" min="1" />
                <span asp-validation-for="EmployeeNameIndex" class="text-danger"></span>
            </div>
            <div class="form-group row">
                <label class="col col-4" asp-for="EmploymentDateIndex"></label>
                <input class="form-control col col-4" type="number" asp-for="EmploymentDateIndex" value="1" min="1" />
                <span asp-validation-for="EmploymentDateIndex" class="text-danger"></span>
            </div>

            <div id="monthDaysDiv">
                <div class="form-group row">
                    <label class="col col-4" asp-for="StartDayInMonth"></label>
                    <input class="form-control col col-4" type="number" asp-for="StartDayInMonth" value="1" min="1" />
                    <span asp-validation-for="StartDayInMonth" class="text-danger"></span>
                </div>
                <div class="form-group row">
                    <label class="col col-4" asp-for="EndDayInMonth"></label>
                    <input class="form-control col col-4" type="number" asp-for="EndDayInMonth" value="1" min="1" />
                    <span asp-validation-for="EndDayInMonth" class="text-danger"></span>
                </div>
            </div>

            <div class="form-check row ml-0">
                <input type="checkbox" class="form-check-input" id="weekendColorCheck" onchange="ToggleDiv(this, 'weekendColorDiv')">
                <label class="form-check-label">@Localizer["Select the weekends` color"]</label>
            </div>

            <div class="form-group row" id="weekendColorDiv" hidden>
                <label class="col col-4" asp-for="WeekendColor"></label>
                <select class="selectpicker col col-4 form-control" id="weekendColorSelect" asp-for="WeekendColor"></select>
                <span asp-validation-for="WeekendColor" class="text-danger"></span>
            </div>

            <div class="form-check row ml-0">
                <input type="checkbox" class="form-check-input" id="teamAndLocationCheck" onchange="ToggleDiv(this, 'teamAndLocationDiv')">
                <label class="form-check-label">@Localizer["Include team and location columns"]</label>
            </div>

            <div id="teamAndLocationDiv" hidden>
                <div class="form-group row">
                    <label class="col col-4" asp-for="TeamIndex"></label>
                    <input class="form-control col col-4" type="number" asp-for="TeamIndex" value="1" min="1" />
                    <span asp-validation-for="TeamIndex" class="text-danger"></span>
                </div>
                <div class="form-group row">
                    <label class="col col-4" asp-for="LocationIndex"></label>
                    <input class="form-control col col-4" type="number" asp-for="LocationIndex" value="1" min="1" />
                    <span asp-validation-for="LocationIndex" class="text-danger"></span>
                </div>
            </div>

            <div class="form-check row ml-0">
                <input type="checkbox" class="form-check-input" id="paidAndGiftDaysCheck" onchange="ToggleDiv(this, 'paidAndGiftDaysDiv')">
                <label class="form-check-label" for="exampleCheck1">@Localizer["Include paid and gift days columns"]</label>
            </div>

            <div id="paidAndGiftDaysDiv" hidden>
                <div class="form-group row">
                    <div class=" col col-4 pr-0">
                        <label asp-for="StartPaidDaysIndex"></label>
                        <input class="form-control" type="number" asp-for="StartPaidDaysIndex" value="1" min="1" />
                        <span asp-validation-for="StartPaidDaysIndex" class="text-danger"></span>
                    </div>
                    <div class=" col col-4 pr-0">
                        <label asp-for="EndPaidDaysIndex"></label>
                        <input class="form-control" type="number" asp-for="EndPaidDaysIndex" value="1" min="1" />
                        <span asp-validation-for="EndPaidDaysIndex" class="text-danger"></span>
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col col-4" asp-for="GiftDaysIndex"></label>
                    <input class="form-control col col-4" type="number" asp-for="GiftDaysIndex" value="1" min="1" />
                    <span asp-validation-for="GiftDaysIndex" class="text-danger"></span>
                </div>
            </div>
            <div class="form-group row col col-8">
                <input class="btn btn-success" type="submit" value=@Localizer["Import sheet"] />
            </div>
        </div>
    </form>
</div>

<div class="modal fade" id="answerModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">The answer from server.</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="answerModalBody">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


@section css{
    <link rel="stylesheet" href="~/lib/bootstrap-select/css/bootstrap-select.min.css" />
    <link rel="stylesheet" href="~/css/excel/import_excel_file.css" />
<style>
    #excelFrame {
        position: relative;
        width: 98vw;
        height: 75vh;
        margin-left: -50vw;
        left: 55%;
    }
</style>
}

@section Scripts{
    <script src="~/lib/bootstrap-select/js/bootstrap-select.min.js"></script>
    <script src="~/lib/jquery.form/jquery.form.js"></script>
    <script>
        function getExcelSheetNames() {
            let weekendColorSelect = document.getElementById("weekendColorSelect");
            weekendColorSelect.removeEventListener("change", ChangeWeekendColorSelect);
            let excelColumnsData = document.getElementById("excelColumnsData");
            let selectSheetDiv = document.getElementById("selectSheetDiv");
            let excelFrame = document.getElementById("excelFrame");
            excelFrame.hidden = true;
            excelColumnsData.hidden = true;
            selectSheetDiv.hidden = true;
            let formData = new FormData();
            let xhttp = new XMLHttpRequest();
            let excelFile = document.getElementById('fileInput').files[0];
            if (excelFile == null) {
                return;
            }
            formData.append('file', excelFile);
            xhttp.open("POST", "GetExcelSheetNames");
            xhttp.onload = function () {
                if (xhttp.status == 200 && xhttp.readyState == 4) {
                    let sheetNameSelect = document.getElementById("sheetNameSelect");
                    let selectLength = sheetNameSelect.options.length
                    for (let i = selectLength; i >= 0; i--) {
                        sheetNameSelect.remove(i);
                    }
                    let sheetNameArray = JSON.parse(xhttp.response);
                    for (let i = 0; i < sheetNameArray.length; i++) {
                        let option = document.createElement("option");
                        option.text = sheetNameArray[i];
                        option.value = sheetNameArray[i];
                        sheetNameSelect.add(option);
                    }
                    $('#sheetNameSelect').selectpicker('refresh');
                    selectSheetDiv.hidden = false;
                }
                else {
                    console.log("error");
                }

            }
            xhttp.send(formData);
        }

        function showSheet() {
            let sheetNameSelect = document.getElementById("sheetNameSelect");
            let excelColumnsData = document.getElementById("excelColumnsData");
            let selectedSheetName = sheetNameSelect.options[sheetNameSelect.selectedIndex].value;
            let excelFrame = document.getElementById("excelFrame");
            let weekendColorSelect = document.getElementById("weekendColorSelect");
            weekendColorSelect.removeEventListener("change", ChangeWeekendColorSelect);
            excelFrame.src = "about:blank";
            excelFrame.hidden = true;
            excelColumnsData.hidden = true;
            let excelSpinner = document.getElementById("excelSpinner");
            excelSpinner.hidden = false;
            let formData = new FormData();
            let xhttp = new XMLHttpRequest();
            let excelFile = document.getElementById('fileInput').files[0];
            formData.append('file', excelFile);
            formData.append('sheetName', selectedSheetName);
            xhttp.open("POST", "GetSheetAsHtml");
            xhttp.onload = function () {
                if (xhttp.status == 200 && xhttp.readyState == 4) {
                    excelFrame.contentWindow.document.open('text/html', 'replace');
                    excelFrame.contentWindow.document.write(this.response);
                    excelFrame.contentWindow.document.close();
                    getSheetColors();
                    setMonthDaysRange();
                    deleteEmptyRowsInFrame();
                    excelFrame.hidden = false;
                    excelColumnsData.hidden = false;
                }
                else {
                    console.log("error");
                }

            }
            xhttp.onloadend = function () {
                let excelSpinner = document.getElementById("excelSpinner");
                excelSpinner.hidden = true;
            }
            xhttp.send(formData);
        }

        function ToggleDiv(checkBox, divId) {
            let divElement = document.getElementById(divId);
            if (checkBox.checked == true) {
                divElement.hidden = false;
            }
            else {
                divElement.hidden = true;
            }
        }

        function getSheetColors() {
            let formData = new FormData();
            let xhttp = new XMLHttpRequest();
            let selectedSheetName = sheetNameSelect.options[sheetNameSelect.selectedIndex].value;
            let excelFile = document.getElementById('fileInput').files[0];
            formData.append('file', excelFile);
            formData.append('sheetName', selectedSheetName);
            xhttp.open("POST", "GetSheetColors");
            xhttp.onload = function () {
                if (xhttp.status == 200 && xhttp.readyState == 4) {
                    let weekendColorSelect = document.getElementById("weekendColorSelect");
                    let selectLength = weekendColorSelect.options.length
                    for (let i = selectLength; i >= 0; i--) {
                        weekendColorSelect.remove(i);
                    }
                    let colorArray = JSON.parse(xhttp.response);
                    for (let i = 0; i < colorArray.length; i++) {
                        let option = document.createElement("option");
                        option.text = colorArray[i];
                        option.value = colorArray[i];
                        option.style.backgroundColor = colorArray[i];
                        option.style.color = colorArray[i];
                        weekendColorSelect.add(option);
                    }
                    let weekendColorDiv = document.getElementById("weekendColorDiv");
                    let colorButton = weekendColorDiv.querySelector("button");
                    colorButton.style.color = colorArray[0];
                    colorButton.style.backgroundColor = colorArray[0];
                    $('#weekendColorSelect').selectpicker('refresh');
                    weekendColorSelect.addEventListener("change", ChangeWeekendColorSelect);
                }
                else {
                    console.log("error");
                }

            };
            xhttp.send(formData);
        }

        function setMonthDaysRange() {
            const monthNames = ["Январь", "Февраль", "Март", "Aпрель", "Май", "Июнь",
                "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"
            ];
            let monthDaysDiv = document.getElementById("monthDaysDiv");
            let inputs = monthDaysDiv.querySelectorAll("input");
            let inputsArray = Array.apply(null, inputs);
            let sheetNameSelect = document.getElementById("sheetNameSelect");
            let sheetNameArray = sheetNameSelect.options[sheetNameSelect.selectedIndex].value.split(' ');
            let selectedMonth = sheetNameArray[0];
            let selectedYear = sheetNameArray[1];
            let monthIndex = monthNames.findIndex(m => m == selectedMonth);
            let maxDaysInMonth = new Date(selectedYear, monthIndex + 1, 0).getDate();
            inputsArray.forEach(i => { i.max = maxDaysInMonth; i.value = 1; });
        }

        function ChangeWeekendColorSelect() {
            let weekendColorDiv = document.getElementById("weekendColorDiv");
            let weekendColorSelect = document.getElementById("weekendColorSelect");
            let colorButton = weekendColorDiv.querySelector("button");
            let selectedColor = weekendColorSelect.options[weekendColorSelect.selectedIndex].value;
            colorButton.style.color = selectedColor;
            colorButton.style.backgroundColor = selectedColor;
        }

        function deleteEmptyRowsInFrame() {
            let frameDocument = document.getElementById("excelFrame").contentWindow.document;
            let frameTableBody = frameDocument.querySelector("tbody");
            Array.from(frameTableBody.children).forEach(function (tableRow) {
                if (Array.from(tableRow.children).every(tableData => {
                    return (tableData.children[0].innerHTML.trim() == "") && tableData.style.backgroundColor == "" &&
                        (($(tableData).outerWidth() - $(tableData).innerWidth() == 0) || ($(tableData).outerHeight() - $(tableData).innerHeight() == 0))
                })) {
                    tableRow.remove();
                }
            }); 
        }

        document.querySelector('#excelForm').addEventListener('submit', function (e) {
            e.preventDefault();
            if (document.getElementById("paidAndGiftDaysCheck").checked == false) {
                document.querySelectorAll("#paidAndGiftDaysDiv input").forEach(i => i.disabled = true);
            }
            if (document.getElementById("teamAndLocationCheck").checked == false) {
                document.querySelectorAll("#teamAndLocationDiv input").forEach(i => i.disabled = true);
            }
            if (document.getElementById("weekendColorCheck").checked == false) {
                document.querySelectorAll("#weekendColorDiv select").forEach(i => i.disabled = true);
            }
            var options = {
                beforeSubmit: function () {
                    let excelColumnsData = document.getElementById("excelColumnsData");
                    let selectSheetDiv = document.getElementById("selectSheetDiv");
                    let excelFrame = document.getElementById("excelFrame");
                    excelFrame.hidden = true;
                    excelColumnsData.hidden = true;
                    selectSheetDiv.hidden = true;
                    let excelSpinner = document.getElementById("excelSpinner");
                    excelSpinner.hidden = false;
                    let excelErrors = document.getElementById("excelErrors");
                    excelErrors.innerHTML = "";
                },
                success: function (answersArray) {
                    if (typeof (answersArray) == "object") {
                        if (answersArray[0] == "InputException") {
                            let excelErrors = document.getElementById("excelErrors");
                            for (var i = 1; i < answersArray.length; i++) {
                                let li = document.createElement("li");
                                li.innerHTML = answersArray[i];
                                excelErrors.appendChild(li);
                            }
                            let excelColumnsData = document.getElementById("excelColumnsData");
                            let selectSheetDiv = document.getElementById("selectSheetDiv");
                            let excelFrame = document.getElementById("excelFrame");
                            excelFrame.hidden = false;
                            excelColumnsData.hidden = false;
                            selectSheetDiv.hidden = false;
                            document.querySelectorAll("#paidAndGiftDaysDiv input").forEach(i => i.disabled = false);
                            document.querySelectorAll("#teamAndLocationDiv input").forEach(i => i.disabled = false);
                            document.querySelectorAll("#weekendColorDiv select").forEach(i => i.disabled = false);
                        }
                        if (answersArray[0] == "EmployeeNotFoundException") {
                            let answerModalBody = document.getElementById("answerModalBody");
                            answerModalBody.innerHTML = "";
                            for (let i = 1; i < answersArray.length; i++) {
                                let paragraph = document.createElement("p");
                                paragraph.innerHTML = answersArray[i];
                                answerModalBody.appendChild(paragraph);
                            }
                            document.querySelectorAll("#paidAndGiftDaysDiv input").forEach(i => i.disabled = false);
                            document.querySelectorAll("#teamAndLocationDiv input").forEach(i => i.disabled = false);
                            document.querySelectorAll("#weekendColorDiv select").forEach(i => i.disabled = false);
                            document.querySelector("#paidAndGiftDaysDiv").hidden = true;
                            document.querySelector("#teamAndLocationDiv").hidden = true;
                            document.querySelector("#weekendColorDiv").hidden = true;
                            $("#excelForm").resetForm();
                            $('#answerModal').modal('show');
                        }
                    }
                    else {
                        //$("html").html($("html", answersArray).html());
                    }
                    let excelSpinner = document.getElementById("excelSpinner");
                    excelSpinner.hidden = true;
                },
                error: function () {
                    document.querySelectorAll("#paidAndGiftDaysDiv input").forEach(i => i.disabled = false);
                    document.querySelectorAll("#teamAndLocationDiv input").forEach(i => i.disabled = false);
                    document.querySelectorAll("#weekendColorDiv select").forEach(i => i.disabled = false);
                    let excelSpinner = document.getElementById("excelSpinner");
                    excelSpinner.hidden = true;
                    console.log("error");
                },
            };
            $(this).ajaxSubmit(options);
        });
    </script>
}

